<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基础知识总结</title>
    <url>/post/2021/sum/</url>
    <content><![CDATA[<h4 id="宏相关"><a href="#宏相关" class="headerlink" title="宏相关"></a>宏相关</h4><h5 id="宏定义的缺陷"><a href="#宏定义的缺陷" class="headerlink" title="宏定义的缺陷"></a>宏定义的缺陷</h5><ol>
<li>宏定义在预处理阶段被替换，不会进入符号表，会给调试与处理编译错误增加困难。</li>
<li>宏定义在所有出现的地方进行替换，将增大生成的目标代码的体积。</li>
<li>宏定义无法限制作用域，更不能提供任何封装性。</li>
<li>宏定义难以避免调用时的边际效应（诸如自增等操作符可能使宏定义不合预期）。</li>
</ol>
<h5 id="正确的编程实践"><a href="#正确的编程实践" class="headerlink" title="正确的编程实践"></a>正确的编程实践</h5><ol>
<li>使用 <code>const</code>，<code>enum</code> 等定义常量。</li>
<li>使用 <code>inline</code> 函数。</li>
</ol>
<h4 id="堆栈相关"><a href="#堆栈相关" class="headerlink" title="堆栈相关"></a>堆栈相关</h4><p>栈中的变量成为自动变量或局部变量，由处理器自动创建与销毁。存放在栈或静态存储区中的对象的存储和生命周期在编译时确定，可以快速分配和释放，在运行效率上有优势，但牺牲了灵活性（在编写程序时就必须知道对象的数量、生命周期和类型）。</p>
<p>在堆中动态创建对象，可以在运行时决定创建的对象的数量、生命期和类型。但在堆上分配存储所需要的时间比在栈上创建存储要 <strong>长得多</strong>。同时，在堆上创建的对象无法由编译器决定其生命周期，在 C++ 中需要程序员编程决定何时将其销毁。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Effective C++, Thinking in C++</tag>
      </tags>
  </entry>
</search>
